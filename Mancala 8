
#include <iostream>
#include <iomanip>
using namespace std;
const int arraySize = 15; // constant integer used to determine size of the array holding the bead values 
void showBottomRowNumbers() //function for outputting the #'s 12-7 in descending order with stars between
{
	cout << "*      ";
	for (int i = 12; i > 9; i--)//int i is the controlling variable stating what number to "count down" from.
	{
		cout << "*  " << i << " " << setw(4);
		//sets width of output to 4 for the sake of neatness in display
	}

	for (int j = 9; j > 6; j--) // for loop displaying 9-6 because otherwise the double digits numbers throw off the board alignment
	{
		cout << "*  " << j << "  " << setw(4);
	}
	cout << " *      *";
	cout << "\n";
}
void showTopRowNumbers() // function to output the #'s 0-6 in ascending order with stars between
{

	cout << "*      ";
	for (int i = 0; i < 6; i++)//int i is the controlling variable stating what number to stop "counting up" at.
	{
		cout << "*  " << i << "  " << setw(4);

		//sets width of output to 4 for the sake of neatness in display

	}
	cout << " *      *";
	cout << "\n";
}
void makeDottedLine()
{
	for (int j = 8; j > 0; --j)
	{//int j controls how many stars are output, while int i controls how many spaces
	 //function to make a dotted line with one star, followed by six spaces, iterated 8 times
		cout << "*";

		for (int i = 6; i > 0; --i)
		{
			cout << " ";
		}
	}
	cout << "*";
}
void makeSolidLine(int line)
{//int line gets passed a value from wherever it's called and determines the number of stars in the line
 // function to output a user submitted amount of stars 
	for (int i = line; i > 0; --i)
	{
		cout << "*";
	}
}
void startingArray(int myArray[arraySize]) //initializes array with values of 4 in all bins except 7 and 14 ("end bins") which have a value of 0
{
	for (int i = 0; i < arraySize; i++)
	{
		myArray[i] = 4;
	}
	myArray[7] = 0;
	myArray[14] = 0;
}
void showTopBins(int myArray[arraySize]) // for loop to display array indices 0-7 as "points/beads"
{
	cout << "*      ";
	for (int i = 0; i <= 5; i++)
	{
		cout << "*  " << myArray[i] << "  " << setw(4);
	}
	cout << " *      *";
	cout << "\n";
}
void showBottomBins(int myArray[arraySize]) /* for loop to display array indices 6-14 as points/beads*/
{
	for (int i = 14; i > 6; i--)
	{
		cout << "*  " << myArray[i] << "  " << setw(4);
	}
	cout << " *      ";
	cout << "\n";
}
void showBoard(int myArray[arraySize])
{// function to create the outline of mancala board. Calls all functions listed above.
	makeSolidLine(57);
	cout << endl;
	makeDottedLine();
	cout << endl;
	showTopRowNumbers();
	makeDottedLine();
	cout << endl;
	showTopBins(myArray);
	makeDottedLine();
	cout << endl;
	cout << "* 13   ";
	makeSolidLine(50);
	cout << " 6 *";
	cout << endl;
	makeDottedLine();
	cout << endl;
	showBottomRowNumbers();
	makeDottedLine();
	cout << endl;
	showBottomBins(myArray);
	makeDottedLine();
	cout << endl;
	makeSolidLine(57);
}
int gameOverCheck(int myArray[arraySize]) // function to check if the game is over and who won 
{
	int playerOneBeadCount = 0;//for storing the value of beads attributed to player one
	int playerTwoBeadCount = 0;//for storing the value of beads attributed to player two
	for (int i = 0; i < 6; i++) //adds together player ones bead (indices 0-6) by iterating through the array
	{

		playerOneBeadCount = playerOneBeadCount + myArray[i];
	}
	for (int j = 6; j < 12; j++)
	{
		playerTwoBeadCount = playerTwoBeadCount + myArray[j]; // adds up player two beads [7-12]
	}
	if (playerOneBeadCount == 0) //adds end bin and remaining beads in p2's bin to p1 score
	{
		playerOneBeadCount = playerTwoBeadCount + myArray[7];

	}
	else if (playerTwoBeadCount == 0) //adds end bin and remaining beads in p1's bin to p2 score
	{
		playerTwoBeadCount = playerOneBeadCount + myArray[14];

	}
	else if (playerOneBeadCount && playerTwoBeadCount > 0) //if no one's middle bins are at zero, returns error; keep
														   // playing message. 
	{
		cout << "Not yet. Keep playing!";
		return -1;
	}
	else if (playerOneBeadCount == playerTwoBeadCount) 
	{
		cout << "It's a tie!";
			return 3;
	}
	if (playerOneBeadCount > playerTwoBeadCount)
	{
		cout << "Player one is the winner!" << endl;
		return 1;
	}
	else
	{
		cout << "Player two is the winner!" << endl;
		return 2;
	}
}

int getStartingBin(int myArray[arraySize], int playerNumber, int &binNumber)
//function to check if the user selected starting point is a viable option
{
	while (playerNumber == 1 && binNumber > 6)
	{
		cout << "Illegal bin, please choose another" << endl;
		cin >> binNumber;
	}
	while (playerNumber == 2 && binNumber < 7)
	{
		cout << "Illegal bin, please choose another" << endl;
		cin >> binNumber;
	}
	while (binNumber == 7 || binNumber == 14)
	{
		cout << "No end bins, please choose another" << endl;
		cin >> binNumber;
	}

	cout << "Nice choice!";
	return binNumber;
}

void dropBeads(int myArray[],int num, int playerNum) //function to drop beads 
{
	int number = getStartingBin(myArray, playerNum, num); //Starting bin number
	int numberOfBeads = myArray[num]; //number of beads in starting bin
	cout << "Number of beads is " << num << "." << endl;		
	do { // while the number of beads is greater than 0, increment position in the array by one, increase the value of that indice by one, repeat. 
		while (numberOfBeads > 0)
		{
			cout << numberOfBeads << " Number of Beads" << endl;
			cout << number << " Original Bin Number" << endl << myArray[num] << " Original Array Value" << endl;
			if (playerNum == 1 && number == 14)
			{
				number = 0;
			}
			else if (playerNum == 2 && number == 7)
			{
				number++;
			}
			number++; //bin or indice number
			myArray[number]++; // value of array 
			cout << number << " Changed Bin Number" << endl;
			cout << myArray[number] << " Changed Array Value" << endl;
			numberOfBeads--;
		}
	} while (myArray[number] > 0);
}
int main()
{
	int playerNum = 0; // which user is currently taking their turn
	int binNum = 4; //the bin the user chooses to begin their turn with
	int beadArray[arraySize] = { 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 10, 11, 12, 13, 14 };
	// array for holding bead count in each individual bin
	startingArray(beadArray);
	//showBoard(beadArray);
	//cout << "Please enter the player number!" << endl;
	//cin >> playerNum;
	//cout << "Please choose your starting bin!" << endl;
	//cin >> binNum;
	//gameOverCheck(beadArray);
	//	getStartingBin(beadArray, playerNum, binNum);
	dropBeads(beadArray, binNum, playerNum);
	cout << endl;
	system("pause");


}

